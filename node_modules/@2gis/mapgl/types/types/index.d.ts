import { LngLatBounds } from '../objects/lngLatBounds';
import { AnimationOptions } from './animations';
import { InterpolateExpression, StyleOptions } from './styles';
import { FeatureCollection } from 'geojson';
/**
 * Map initialization options.
 */
export interface MapOptions {
    /**
     * Map center in geographical coordinates (`[longitude, latitude]`).
     */
    center?: number[];
    /**
     * Map zoom.
     */
    zoom?: number;
    /**
     * Map style zoom.
     * Use this option if you want to set the same zoom that is used in the style settings. The styleZoom and zoom options set the same map scale but in different projections.
     * If both options are set, the styleZoom has a higher priority than the zoom option.
     */
    styleZoom?: number;
    /**
     * Minimum map styleZoom.
     */
    minZoom?: number;
    /**
     * Maximum map styleZoom.
     */
    maxZoom?: number;
    /**
     * The map will be constrained to the given bounds, if set.
     */
    maxBounds?: LngLatBounds;
    /**
     * Map rotation in degrees.
     */
    rotation?: number;
    /**
     * Map rotation threshold with multitouch in degrees. 10 by default.
     */
    touchRotationThreshold?: number;
    /**
     * Map pitch in degrees.
     */
    pitch?: number;
    /**
     * Minimum map pitch in degrees.
     */
    minPitch?: number;
    /**
     * Maximum map pitch in degrees.
     */
    maxPitch?: number;
    /**
     * The key that allows usage of the API.
     */
    key?: string;
    /**
     * Whether a zoom control should be added during the map initialization. By default it's `"topRight"`.
     * Set to `false` to not add the control.
     */
    zoomControl?: ControlPosition | boolean;
    /**
     * Whether a traffic control should be added during the map initialization. By default it's `false`.
     * Set to `true` to add the traffic control at `"topRight"` position.
     */
    trafficControl?: ControlPosition | boolean;
    /**
     * Whether a floor control should be added during the map initialization. By default it's `false`.
     * Set to `true` to add the floor control at `"topRight"` position.
     */
    floorControl?: ControlPosition | boolean;
    /**
     * Where to add copyright control during the map initialization. By default it's `"bottomRight"`.
     */
    copyright?: ControlPosition;
    /**
     * Enable OSM copyright auto hide after 5 sec
     */
    autoHideOSMCopyright?: boolean;
    /**
     * Set padding for contols layout
     */
    controlsLayoutPadding?: Partial<Padding>;
    /**
     * Disable map zoom on scrolling over the map container.
     */
    disableZoomOnScroll?: boolean;
    /**
     * Prevent users from rotating a map.
     */
    disableRotationByUserInteraction?: boolean;
    /**
     * Prevent users from pitching a map.
     */
    disablePitchByUserInteraction?: boolean;
    /**
     *  Dimensions in pixels applied on each side of the viewport for shifting the vanishing point.
     *  the padding on each side has a clamp to a positive value no larger than the map canvas size for either side
     */
    padding?: Padding;
    /**
     * Set preserveDrawingBuffer option to WebGLRenderingContext.
     */
    preserveDrawingBuffer?: boolean;
    /**
     * Set default background color, while style is loading
     */
    defaultBackgroundColor?: string;
    /**
     * The map style ID, that you can get at https://styles.2gis.com
     */
    style?: string;
    /**
     * Map style global variables
     */
    styleState?: {
        [key: string]: boolean;
    };
    /**
     * Map style options. Containts path to style assets - icons and fonts.
     */
    styleOptions?: Partial<StyleOptions>;
    /**
     * The desired map language.
     * short language code 'en', 'ru', ...etc
     */
    lang?: string;
}
/**
 * Options for Map.isSupported method.
 */
export interface MapSupportOptions {
    /**
     * Causes isSupported method to return false if
     * the performance of MapGL would be dramatically worse than
     *  expected (i.e. a software renderer is would be used)
     */
    failIfMajorPerformanceCaveat: boolean;
}
/**
 * Marker initialization options.
 */
export interface MarkerOptions {
    /**
     * Geographical coordinates of marker center `[longitude, latitude]`.
     */
    coordinates: number[];
    /**
     * Marker icon URL.
     */
    icon?: string;
    /**
     * Marker icon size `[width, height]` in pixels.
     */
    size?: number[];
    /**
     * The position in pixels of the "tip" of the icon (relative to its top left corner).
     * The icon will be aligned so that this point is at the marker's geographical location.
     * Centered by default if size is specified.
     */
    anchor?: number[];
    /**
     * Icon clockwise rotation in the screen plane in degrees.
     */
    rotation?: number;
    /**
     * Marker icon URL in hovered state.
     */
    hoverIcon?: string;
    /**
     * Marker icon size `[width, height]` in pixels in hovered state.
     */
    hoverSize?: number[];
    /**
     * Icon anchor in hovered state.
     */
    hoverAnchor?: number[];
    /**
     * Draw order.
     */
    zIndex?: number;
    /**
     * Minimum display styleZoom of the marker.
     */
    minZoom?: number;
    /**
     * Maximum display styleZoom of the marker.
     */
    maxZoom?: number;
    /**
     * Allows the marker to emit events (like `mouseover`). `true` by default.
     */
    interactive?: boolean;
    /**
     * Initialization options of the marker's label.
     */
    label?: MarkerLabelOptions;
}
export interface MarkerLabelOptions {
    /**
     * Label's text.
     */
    text: string;
    /**
     * Background image for the label.
     */
    image?: LabelImage;
    /**
     * Minimum display styleZoom of the label.
     */
    minZoom?: number;
    /**
     * Maximum display styleZoom of the label.
     */
    maxZoom?: number;
    /**
     * Text color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    color?: string;
    /**
     * Text size.
     */
    fontSize?: number;
    /**
     * Use `haloRadius` to add background behind each letter.
     */
    haloRadius?: number;
    /**
     * Background color of letters (when `haloRadius` is specified). The same format as for `color`.
     */
    haloColor?: string;
    /**
     * Space between each letter.
     */
    letterSpacing?: number;
    /**
     * For multiline label `lineHeight` specify how far lines between each other.
     */
    lineHeight?: number;
    /**
     * The offset distance of text box from its `relativeAnchor`.
     * Positive values indicate left and up, while negative values indicate right and down.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use the `offset` option instead.
     * @deprecated
     */
    anchor?: number[];
    /**
     * The offset distance of text box from its `relativeAnchor`.
     * Positive values indicate right and down, while negative values indicate left and up.
     */
    offset?: number[];
    /**
     * Coordinates (from 0 to 1 in each dimension) of the text box "tip" relative to its top left corner, for example:
     * [0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.
     * The label will be placed so that this point is at geographical `coordinates` respects the absolute `offset`.
     */
    relativeAnchor?: number[];
    /**
     * Draw order.
     */
    zIndex?: number;
}
/**
 * Options for marker setIcon and setHoverIcon methods.
 */
export interface MarkerIconOptions {
    /**
     * Marker icon URL.
     */
    icon: string;
    /**
     * The position in pixels of the "tip" of the icon (relative to its top left corner).
     * The icon will be aligned so that this point is at the marker's geographical location.
     * Centered by default if size is specified.
     */
    anchor?: number[];
    /**
     * Marker icon size `[width, height]` in pixels.
     */
    size?: number[];
    /**
     * Marker icon clockwise rotation in the screen plane in degrees.
     */
    rotation?: number;
}
/**
 * Label initialization options.
 */
export interface LabelOptions {
    /**
     * Geographical coordinates of label center `[longitude, latitude]`.
     */
    coordinates: number[];
    /**
     * Label's text.
     */
    text: string;
    /**
     * Background image for the label.
     */
    image?: LabelImage;
    /**
     * Minimum display styleZoom of the label.
     */
    minZoom?: number;
    /**
     * Maximum display styleZoom of the label.
     */
    maxZoom?: number;
    /**
     * Text color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    color?: string;
    /**
     * Text size.
     */
    fontSize?: number;
    /**
     * Use `haloRadius` to add background behind each letter.
     */
    haloRadius?: number;
    /**
     * Background color of letters (when `haloRadius` is specified). The same format as for `color`.
     */
    haloColor?: string;
    /**
     * Space between each letter.
     */
    letterSpacing?: number;
    /**
     * For multiline label `lineHeight` specify how far lines between each other.
     */
    lineHeight?: number;
    /**
     * The offset distance of text box from its `relativeAnchor`.
     * Positive values indicate left and up, while negative values indicate right and down.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use the `offset` option instead.
     * @deprecated
     */
    anchor?: number[];
    /**
     * The offset distance of text box from its `relativeAnchor`.
     * Positive values indicate right and down, while negative values indicate left and up.
     */
    offset?: number[];
    /**
     * Coordinates (from 0 to 1 in each dimension) of the text box "tip" relative to its top left corner, for example:
     * [0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.
     * The label will be placed so that this point is at geographical `coordinates` respects the absolute `offset`.
     */
    relativeAnchor?: number[];
    /**
     * Draw order.
     */
    zIndex?: number;
}
/**
 * HtmlMarker initialization options.
 */
export interface HtmlMarkerOptions {
    /**
     * Geographical coordinates `[longitude, latitude]` of the top-left corner of the HTML marker, taking into account its anchor.
     */
    coordinates: number[];
    /**
     * HTML content of the HTML marker.
     */
    html: HTMLElement | string;
    /**
     * The position in pixels of the "tip" of the HTML marker relative to its top-left corner.
     */
    anchor?: number[];
    /**
     * Minimum display styleZoom of the HTML marker.
     */
    minZoom?: number;
    /**
     * Maximum display styleZoom of the HTML marker.
     */
    maxZoom?: number;
    /**
     * Draw order.
     */
    zIndex?: number;
    /**
     * Capture events if set. Otherwise events will passed to the map. By default it's `true`.
     */
    preventMapInteractions?: boolean;
}
/**
 * Possible position of the control.
 */
export declare type ControlPosition = 'topLeft' | 'topCenter' | 'topRight' | 'centerLeft' | 'centerRight' | 'bottomLeft' | 'bottomCenter' | 'bottomRight';
/**
 * Control initialization options.
 */
export interface ControlOptions {
    /**
     * Position of the control.
     */
    position: ControlPosition;
}
/**
 * Polygon initialization options.
 */
export interface PolygonOptions {
    /**
     * Geographical coordinates of polygon points in format: `[outerEdges, cropEdges1, cropEdges2, ...]`.
     *
     * The first section is `outerEdges` which describes an array of outer edges: `[firstPoint, secondPoint, ..., firstPoint]`.
     * Each point is a geographical point: `[longitude, latitude]`. The last point should be the same as the first.
     *
     * Then optionally you can crop some polygons from the main one (outer) by specifying `cropEdges1`, `cropEdges2` and so on.
     * A format is the same as the main section: `[firstPoint, secondPoint, ..., firstPoint]` each point is `[longitude, latitude]`.
     *
     * Only the first section (`outerEdges`) is required. There may be many `cropEdges` sections.
     */
    coordinates: number[][][];
    /**
     * Draw order.
     */
    zIndex?: number;
    /**
     * Minimum display styleZoom.
     */
    minZoom?: number;
    /**
     * Maximum display styleZoom.
     */
    maxZoom?: number;
    /**
     * Fill color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    color?: string;
    /**
     * Stroke color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    strokeColor?: string;
    /**
     * Stroke width in pixels.
     */
    strokeWidth?: number;
    /**
     * Allows the polygon to emit events (like `mouseover`). `true` by default.
     */
    interactive?: boolean;
}
/**
 * Polyline initialization options.
 */
export interface PolylineOptions {
    /**
     * An array of polyline coordinates: `[firstPoint, secondPoint, ...]`.
     * Each point is a geographical point: `[longitude, latitude]`.
     */
    coordinates: number[][];
    /**
     * Draw order of the first line.
     */
    zIndex?: number;
    /**
     * Draw order of second line.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different zIndex.
     * @deprecated
     */
    zIndex2?: number;
    /**
     * Draw order of third line.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different zIndex.
     * @deprecated
     */
    zIndex3?: number;
    /**
     * The line width in pixels.
     */
    width?: number | InterpolateExpression<number>;
    /**
     * The second line width in pixels.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different width.
     * @deprecated
     */
    width2?: number | InterpolateExpression<number>;
    /**
     * The third line width in pixels.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different width.
     * @deprecated
     */
    width3?: number | InterpolateExpression<number>;
    /**
     * The line color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    color?: string;
    /**
     * The second line color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different color.
     * @deprecated
     */
    color2?: string;
    /**
     * The third line color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different color.
     * @deprecated
     */
    color3?: string;
    /**
     * The length of the gap in pixels. The default gap length is equal to the dash length.
     */
    gapLength?: number | InterpolateExpression<number>;
    /**
     * The gap color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    gapColor?: string;
    /**
     * The length of the dash in pixels. If no dash length is specified, a polyline will be drawn.
     */
    dashLength?: number | InterpolateExpression<number>;
    /**
     * Minimum display styleZoom.
     */
    minZoom?: number;
    /**
     * Maximum display styleZoom.
     */
    maxZoom?: number;
    /**
     * Allows the polyline to emit events (like `mouseover`). `true` by default.
     */
    interactive?: boolean;
}
/**
 * Circle initialization options.
 */
export interface CircleOptions {
    /**
     * Geographical coordinates of the circle center: `[longitude, latitude]`.
     */
    coordinates: number[];
    /**
     * Circle radius in meters.
     */
    radius: number;
    /**
     * Draw order.
     */
    zIndex?: number;
    /**
     * Minimum display styleZoom.
     */
    minZoom?: number;
    /**
     * Maximum display styleZoom.
     */
    maxZoom?: number;
    /**
     * Fill color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    color?: string;
    /**
     * Stroke color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    strokeColor?: string;
    /**
     * Stroke width in pixels.
     */
    strokeWidth?: number;
    /**
     * Allows the circle to emit events (like `mouseover`). `true` by default.
     */
    interactive?: boolean;
}
/**
 * CircleMarker initialization options.
 */
export interface CircleMarkerOptions {
    /**
     * Geographical coordinates of the circleMarker center: `[longitude, latitude]`.
     */
    coordinates: number[];
    /**
     * Draw order.
     */
    zIndex?: number;
    /**
     * Minimum display styleZoom.
     */
    minZoom?: number;
    /**
     * Maximum display styleZoom.
     */
    maxZoom?: number;
    /**
     * Fill color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    color?: string;
    /**
     * CircleMarker radius in pixels.
     * @hidden
     */
    radius?: number;
    /**
     * CircleMarker diameter in pixels.
     */
    diameter?: number;
    /**
     * Stroke color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    strokeColor?: string;
    /**
     * Stroke width in pixels.
     */
    strokeWidth?: number;
    /**
     * The second stroke color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use additional CircleMarker to draw an extra stroke.
     * @deprecated
     */
    stroke2Color?: string;
    /**
     * The second stroke width in pixels.
     *
     * **[DEPRECATED]** Will be removed in the next major release, use additional CircleMarker to draw an extra stroke.
     * @deprecated
     */
    stroke2Width?: number;
    /**
     * Allows the circleMarker to emit events (like `mouseover`). `true` by default.
     */
    interactive?: boolean;
}
/**
 * Stretchable image config object.
 */
export interface StretchableImageSource {
    /**
     * Source image URL.
     */
    url: string;
    /**
     * `[width, height]` — image size in logical pixels
     */
    size: [number, number];
    /**
     * Defines the parts of the image that can be stretched horizontally.
     */
    stretchX?: Array<[number, number]>;
    /**
     * Defines the parts of the image that can be stretched vertically.
     */
    stretchY?: Array<[number, number]>;
    /**
     * The ratio of logical pixels in the image to physical pixels on the screen.
     */
    pixelRatio?: number;
}
/**
 * Source image for text label background.
 */
export interface LabelImage extends StretchableImageSource {
    /**
     * Sets the space in pixels between the label text box and the edge of the stretched image
     * for all four sides [top, right, bottom, left], like in CSS.
     * [0, 0, 0, 0] by default.
     */
    padding?: [number, number, number, number];
}
/**
 * Padding in pixels on different sides of the container.
 */
export interface Padding {
    top: number;
    right: number;
    bottom: number;
    left: number;
}
export interface FitBoundsOptions {
    /**
     * The amount of padding in pixels to add to the given bounds.
     */
    padding?: Partial<Padding>;
    /**
     * If true fitBounds ignores the padding property in the map options
     */
    skipMapPadding?: boolean;
    /**
     * If true the fitBounds will consider the map rotation
     */
    considerRotation?: boolean;
    /**
     * Animation options.
     */
    animation?: AnimationOptions;
}
/**
 * Data source attributes.
 */
export interface SourceAttributes {
    [key: string]: number | string | boolean;
}
/**
 * GeoJson data source initialization options.
 */
export interface GeoJsonSourceOptions {
    /**
     * Data source attributes.
     */
    attributes?: SourceAttributes;
    /**
     * GeoJSON collection of feature objects.
     */
    data: FeatureCollection;
}
/**
 * RasterTileSource initialization options.
 */
export interface RasterTileSourceOptions {
    /**
     * Convert tile coordinates to URL.
     *
     * @param x
     * @param y
     * @param zoom
     */
    url: (x: number, y: number, zoom: number) => string;
    /**
     * Data source attributes.
     */
    attributes?: SourceAttributes;
    /**
     * Contains an attribution to be displayed when the map is shown to a user.
     */
    attribution?: string;
}
